#Importing numpy and cv2
import cv2
import numpy as np


def detect_circles_in_video(video_path):
    # Capture video
    cap = cv2.VideoCapture(video_path)

  #loop through each frame in the video.
    while cap.isOpened():
        #reads a frame
        ret, frame = cap.read()

        #If frame reading was not successful, exit the loop.
        if not ret:
            print("Can't receive frame")
            break

        # Convert to grayscale
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Apply GaussianBlur 
        gray_blurred = cv2.GaussianBlur(gray, (9, 9), 2)

        # Apply Canny edge detection 
        edges = cv2.Canny(gray_blurred, 50, 150)

        # Display the canny edge on a window named "Edgesvid"
        cv2.imshow('Edgesvid', edges)

        # Detect circles using HoughCircles
        circles = cv2.HoughCircles(gray_blurred,
                                   cv2.HOUGH_GRADIENT, dp=1, minDist=350,
                                   param1=140, param2=40,
                                   minRadius=0, maxRadius=0)
        
        #If atleast one circle is detected
        if circles is not None:
            circles = np.uint16(np.around(circles))
            for i in circles[0, :]:
                # Draw the outer circle on the original frame
                cv2.circle(frame, (i[0], i[1]), i[2], (0, 255, 0), 2)
                # Draw the center of the circle on the original frame
                cv2.circle(frame, (i[0], i[1]), 2, (0, 0, 255), 3)

        # Display the frame with detected circles
        cv2.imshow('Circle Detection', frame)

        # Break the loop when 'q' is pressed for users
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the video capture object and close windows
    cap.release()
    cv2.destroyAllWindows()


#Path to the video
detect_circles_in_video('file:///Users/aidahuang/Downloads/movingcan9.MOV')


